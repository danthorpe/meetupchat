/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "protocol.h"

@implementation MCMCTextMessage

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOriginator: (MCMCUserIdentifier) originator text: (NSString *) text
{
  self = [super init];
  __originator = [originator retain_stub];
  __originator_isset = YES;
  __text = [text retain_stub];
  __text_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"originator"])
  {
    __originator = [[decoder decodeObjectForKey: @"originator"] retain_stub];
    __originator_isset = YES;
  }
  if ([decoder containsValueForKey: @"text"])
  {
    __text = [[decoder decodeObjectForKey: @"text"] retain_stub];
    __text_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__originator_isset)
  {
    [encoder encodeObject: __originator forKey: @"originator"];
  }
  if (__text_isset)
  {
    [encoder encodeObject: __text forKey: @"text"];
  }
}

- (void) dealloc
{
  [__originator release_stub];
  [__text release_stub];
  [super dealloc_stub];
}

- (NSString *) originator {
  return [[__originator retain_stub] autorelease_stub];
}

- (void) setOriginator: (NSString *) originator {
  [originator retain_stub];
  [__originator release_stub];
  __originator = originator;
  __originator_isset = YES;
}

- (BOOL) originatorIsSet {
  return __originator_isset;
}

- (void) unsetOriginator {
  [__originator release_stub];
  __originator = nil;
  __originator_isset = NO;
}

- (NSString *) text {
  return [[__text retain_stub] autorelease_stub];
}

- (void) setText: (NSString *) text {
  [text retain_stub];
  [__text release_stub];
  __text = text;
  __text_isset = YES;
}

- (BOOL) textIsSet {
  return __text_isset;
}

- (void) unsetText {
  [__text release_stub];
  __text = nil;
  __text_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOriginator: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TextMessage"];
  if (__originator_isset) {
    if (__originator != nil) {
      [outProtocol writeFieldBeginWithName: @"originator" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __originator];
      [outProtocol writeFieldEnd];
    }
  }
  if (__text_isset) {
    if (__text != nil) {
      [outProtocol writeFieldBeginWithName: @"text" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __text];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TextMessage("];
  [ms appendString: @"originator:"];
  [ms appendFormat: @"\"%@\"", __originator];
  [ms appendString: @",text:"];
  [ms appendFormat: @"\"%@\"", __text];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MCMCBroadcast

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTextMessage: (MCMCTextMessage *) textMessage
{
  self = [super init];
  __textMessage = [textMessage retain_stub];
  __textMessage_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"textMessage"])
  {
    __textMessage = [[decoder decodeObjectForKey: @"textMessage"] retain_stub];
    __textMessage_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__textMessage_isset)
  {
    [encoder encodeObject: __textMessage forKey: @"textMessage"];
  }
}

- (void) dealloc
{
  [__textMessage release_stub];
  [super dealloc_stub];
}

- (MCMCTextMessage *) textMessage {
  return [[__textMessage retain_stub] autorelease_stub];
}

- (void) setTextMessage: (MCMCTextMessage *) textMessage {
  [textMessage retain_stub];
  [__textMessage release_stub];
  __textMessage = textMessage;
  __textMessage_isset = YES;
}

- (BOOL) textMessageIsSet {
  return __textMessage_isset;
}

- (void) unsetTextMessage {
  [__textMessage release_stub];
  __textMessage = nil;
  __textMessage_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MCMCTextMessage *fieldValue = [[MCMCTextMessage alloc] init];
          [fieldValue read: inProtocol];
          [self setTextMessage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Broadcast"];
  if (__textMessage_isset) {
    if (__textMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"textMessage" type: TType_STRUCT fieldID: 1];
      [__textMessage write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Broadcast("];
  [ms appendString: @"textMessage:"];
  [ms appendFormat: @"%@", __textMessage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MCMCDataFrame

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBroadcast: (MCMCBroadcast *) broadcast
{
  self = [super init];
  __broadcast = [broadcast retain_stub];
  __broadcast_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"broadcast"])
  {
    __broadcast = [[decoder decodeObjectForKey: @"broadcast"] retain_stub];
    __broadcast_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__broadcast_isset)
  {
    [encoder encodeObject: __broadcast forKey: @"broadcast"];
  }
}

- (void) dealloc
{
  [__broadcast release_stub];
  [super dealloc_stub];
}

- (MCMCBroadcast *) broadcast {
  return [[__broadcast retain_stub] autorelease_stub];
}

- (void) setBroadcast: (MCMCBroadcast *) broadcast {
  [broadcast retain_stub];
  [__broadcast release_stub];
  __broadcast = broadcast;
  __broadcast_isset = YES;
}

- (BOOL) broadcastIsSet {
  return __broadcast_isset;
}

- (void) unsetBroadcast {
  [__broadcast release_stub];
  __broadcast = nil;
  __broadcast_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          MCMCBroadcast *fieldValue = [[MCMCBroadcast alloc] init];
          [fieldValue read: inProtocol];
          [self setBroadcast: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DataFrame"];
  if (__broadcast_isset) {
    if (__broadcast != nil) {
      [outProtocol writeFieldBeginWithName: @"broadcast" type: TType_STRUCT fieldID: 1];
      [__broadcast write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DataFrame("];
  [ms appendString: @"broadcast:"];
  [ms appendFormat: @"%@", __broadcast];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation MCMCprotocolConstants
+ (void) initialize {
}
@end

